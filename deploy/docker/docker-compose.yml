version: '3.8'

services:
  powerautomation:
    build: .
    ports:
      - "8000:8000"  # 主應用
      - "8001:8001"  # WebSocket
      - "8765:8765"  # MCP 服務器
      - "5173:5173"  # 前端
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./downloads:/app/downloads
      - .env:/app/.env
    environment:
      - PYTHONPATH=/app:/app/core:/app/mcp_server:/app/goal_alignment_system
      - POWERAUTOMATION_ROOT=/app
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: powerautomation
      POSTGRES_USER: powerautomation
      POSTGRES_PASSWORD: powerautomation_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U powerautomation"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/ssl:/etc/nginx/ssl
    depends_on:
      - powerautomation
    restart: unless-stopped

  mobile-app:
    build:
      context: .
      dockerfile: mobile/Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./mobile:/app/mobile
    depends_on:
      - powerautomation
    restart: unless-stopped

  desktop-app:
    build:
      context: .
      dockerfile: desktop/Dockerfile
    ports:
      - "3001:3001"
    volumes:
      - ./desktop:/app/desktop
    depends_on:
      - powerautomation
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:

networks:
  default:
    name: powerautomation_network